#!/usr/bin/perl
# rotstev.pl 
#
# Generates rotation matrices to rotate Stevens' Operator equivalents by
# phi about y-axis and theta about z-axis. Based on the method of Buckmaster
# (Physica Status Solidi A vol 13, pp 9, 1972) and Rudowicz (J. Phys: C: 
# Solid State Physics, vol 18, pp 1415, 1985).
#
# NB: phi is denoted by f and theta by t in this program
#
# by Duc Le 2006 - duc.le@ucl.ac.uk

use Math::Algebra::Symbols trig=>1;     # exports trig function to my namespace

# The following subroutines were shamelessly stolen from the Perl Cookbook
# by O'Reily, and used for the symbolic matrix multiplications.

sub mmult {
  my ($m1,$m2) = @_;
  my ($m1rows,$m1cols) = matdim($m1);
  my ($m2rows,$m2cols) = matdim($m2);

  unless ($m1cols == $m2rows) {       # raise exception
    die "IndexError: matrices don't match: $m1cols != $m2rows";
  }

  my $result = [];
  my ($i, $j, $k, $m1el, $m2el, $prod_el);

  for $i (range($m1rows)) {
    for $j (range($m2cols)) {
      for $k (range($m1cols)) {
        $m1el = $m1->[$i][$k];
        $m2el = $m2->[$k][$j];
        $prod_el += $m1el * $m2el;
      }
      $result->[$i][$j] = $prod_el;
      $prod_el = 0;
    }
  }

  return $result;
}

sub range { 0 .. ($_[0] - 1) }

sub veclen {
    my $ary_ref = $_[0];
    my $type = ref $ary_ref;
    if ($type ne "ARRAY") { die "$type is bad array ref for $ary_ref" }
    return scalar(@$ary_ref);
}

sub matdim {
    my $matrix = $_[0];
    my $rows = veclen($matrix);
    my $cols = veclen($matrix->[0]);
    return ($rows, $cols);
}

# End of stolen code!

my ($S, $f, $t, $i, $pi) = symbols(qw(six f t i pi));
my ($l, $m, $n);


# Transformation matrix between Stevens and Buckmaster operator equivalents
my $A2 = [
	[1,	0,	0,	   0,	  -1],
	[0,	1/2,	0,	   1/2,	   0],
	[0,	0,	sqrt($S),  0,	   0],
	[0,	1/2,	0,	  -1/2,	   0],
	[1,	0,	0,	   0,	   1]
     ];

my $invA2 = [
	[       1/2,         0,         0,         0,       1/2],
	[         0,         1,         0,         1,         0],
	[         0,         0, sqrt(1/$S),        0,         0],
	[         0,         1,         0,        -1,         0],
	[      -1/2,         0,         0,         0,       1/2]
      ];

# --------------------------------------- O2 ------------------------------------- #

my $D20p2 = (sqrt($S)/4)*sin($t)**2;
my $D20p1 = (sqrt($S)/2)*sin($t)*cos($t);
my $D20p0 = (1/2)*(3*cos($t)**2 - 1);

my $D2m1m2 = exp(-$i*$f) * -(1/2)*sin($t)*(1+cos($t));
my $D2m1p2 = exp(-$i*$f) *  (1/2)*sin($t)*(1-cos($t));
my $D2m1m1 = exp(-$i*$f) *  (1/2)*(1+cos($t))*(2*cos($t)-1);
my $D2m1p1 = exp(-$i*$f) *  (1/2)*(1-cos($t))*(2*cos($t)+1);
my $D2m1p0 = exp(-$i*$f) *  sqrt($S)/2*sin($t)*cos($t);

my $D2p1m2 = exp( $i*$f) * -(1/2)*sin($t)*(1-cos($t));
my $D2p1p2 = exp( $i*$f) *  (1/2)*sin($t)*(1+cos($t));
my $D2p1m1 = exp( $i*$f) *  (1/2)*(1-cos($t))*(2*cos($t)+1);
my $D2p1p1 = exp( $i*$f) *  (1/2)*(1+cos($t))*(2*cos($t)-1);
my $D2p1p0 = exp( $i*$f) * -sqrt($S)/2*sin($t)*cos($t);

my $D2m2m2 = exp(-2*$i*$f) *  (1/4)*(1+cos($t))**2;
my $D2m2p2 = exp(-2*$i*$f) *  (1/4)*(1-cos($t))**2;
my $D2m2m1 = exp(-2*$i*$f) *  (1/2)*sin($t)*(1+cos($t));
my $D2m2p1 = exp(-2*$i*$f) *  (1/2)*sin($t)*(1-cos($t));
my $D2m2p0 = exp(-2*$i*$f) *  sqrt($S)/4*sin($t)**2;

my $D2p2m2 = exp( 2*$i*$f) *  (1/4)*(1-cos($t))**2;
my $D2p2p2 = exp( 2*$i*$f) *  (1/4)*(1+cos($t))**2;
my $D2p2m1 = exp( 2*$i*$f) * -(1/2)*sin($t)*(1-cos($t));
my $D2p2p1 = exp( 2*$i*$f) * -(1/2)*sin($t)*(1+cos($t));
my $D2p2p0 = exp( 2*$i*$f) *  sqrt($S)/4*sin($t)**2;

my $D2 = [
	   [$D2m2m2, $D2m2m1, $D2m2p0, $D2m2p1, $D2m2p2],
           [$D2m1m2, $D2m1m1, $D2m1p0, $D2m1p1, $D2m1p2],
           [$D20p2, -$D20p1,  $D20p0,  $D20p1,  $D20p2 ],
           [$D2p1m2, $D2p1m1, $D2p1p0, $D2p1p1, $D2p1p2],
           [$D2p2m2, $D2p2m1, $D2p2p0, $D2p2p1, $D2p2p2]
         ];

my ($O2m2, $O2m1, $O2p0, $O2p1, $O2p2) = symbols(qw(Otmt Otmo Otpz Otpo Otpt));

# ------------------------------------ Finished !! ------------------------------- #

# The operator in the rotated frame. Rx(y) is equivalent to {Oxy} in Rudowicz notation
# and Ox_y, Oxmy is equivalent to [Oxy], [OxyM] in Rudowicz

my $B2 = [ [$O2m2],[$O2m1],[$O2p0],[$O2p1],[$O2p2] ];

#for $l (0 .. 4) {
#  for $m (0 .. 4) {
#    print $D2->[$l][$m]; print "\n"; }
#  print "\n"; }

my $tmp1 = mmult($invA2,$B2);
my $tmp2 = mmult($D2, $tmp1);
my $R2 = mmult($A2, $tmp2);

print "Transformations relations for O2q:\n";
my $S2 = [];
for $l (0 .. 4) { 
  $S2->[$l] = $R2->[$l][0]->sub(f=>0, t=>$pi/2);
  print $S2->[$l]; print "\n";
  $S2->[$l] = $S2->[$l]->sub(six=>6); 
  $M2->[0][$l] = $S2->[$l]->sub(Otmt=>1,Otmo=>0,Otpz=>0,Otpo=>0,Otpt=>0);
  $M2->[1][$l] = $S2->[$l]->sub(Otmt=>0,Otmo=>1,Otpz=>0,Otpo=>0,Otpt=>0);
  $M2->[2][$l] = $S2->[$l]->sub(Otmt=>0,Otmo=>0,Otpz=>1,Otpo=>0,Otpt=>0);
  $M2->[3][$l] = $S2->[$l]->sub(Otmt=>0,Otmo=>0,Otpz=>0,Otpo=>1,Otpt=>0);
  $M2->[4][$l] = $S2->[$l]->sub(Otmt=>0,Otmo=>0,Otpz=>0,Otpo=>0,Otpt=>1);
}

print "\nRotation Matrix for O2q:\n";
for $l (0 .. 4) { for $m (0 .. 4) {
  print $M2->[$l][$m]; print "\t"; } print "\n"; }
    
