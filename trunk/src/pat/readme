This package was written by Herbert MUELLER
<herbie(at)ifp(dot)tuwien(dot)ac(dot)at> 2004-2007
It is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY

0. Copyright:
   Copyright (C) 2004-2007 H. Mueller
   Pat homepage: http://www.ifp.tuwien.ac.at/pat/

   Pat is free software under the terms of the GNU General Public License.
   See the file LICENSE for details.

1. General:
   Many scientist and technicians have data files containing some data columns
   Usually you are manipulating these data by spread sheet programs with
   graphical output.
   This package has been developed for friends of command line tools to
   perform calculations with their ASCII data files. You can include this
   programs into scripts to perform automatic processing in an efficient way.
   
   PAT: Processing of ASCII Tables
   The tools in this package allows you to perform numerical processing with
   ASCII data files. The PAT-Tools are written in python, so they can be
   simply installed. With some knowledge in programming you can adapt the
   programs for your special purpose.
   
   A valid ASCII data file recognized by PAT must have the following schema:
   
   Any number of text lines followed by columns of numbers.
   The number of columns must not change in the data rows.
   The separators between the numbers are blanks or tabs
   
   Typical short example:
   
   ---------------------------
   Measurement of a falling specimen
   1st column: time [s]
   2nd column: distance [m]
   0   0
   1   5
   1.5 11.25
   2   20
   3   45
   4   80
   5   125
   ---------------------------
   
   
   The package consists of different programs where each performs its special task.
   The philosophy is not to change the original data. The result of the 
   operations applied to the input data file will be sent to standard output.
   So you can pipe (|) the output of each program to another one to perform a
   series of operations or you send the output to a new file (>) to save the
   result.
   Only these columns which are changed by the operation will modified, all
   other columns will be unchanged.
   This concept allows you to write (shell) scripts to manipulate data files
   automatically without user intervention. 
  
   The following operations can be performed:
   
      Calc.py: Perform a calculation with one column  
     Deriv.py: Calculate the numeric derivative
     Exchg.py: Swap columns
    Fileop.py: Add, subtract, multiply or divide two data files
     Integ.py: Numerical integration
    Intpol.py: Interpolate one value from a table
      Look.py: Interpolate all values of data file from a table file
      Mean.py: Calculate the mean value in bins with size of delta x.
     Merge.py: Merge two data files
    Select.py: Obtain a part from a data file
      Sort.py: Sort columns
     Stext.py: Change one text line
   
   All scripts work on command line:

    script [options] input_file

   Each script understands several options.
   Detailed help for each script can be obtained with the option -h.

   If X and Qt (pyqt) are installed on computer also some graphical
   tools are available for displaying and printing data files:
   
       Show.py: Display a graphic of one data file on the screen
       Plot.py: Display and print up to 8 data files in one plot
       Disp.py: Detailed graphic display with the possibility to change data
    Rescale.py: Get a data file from a x/y-plot (jpeg, png, ...)

   For friends of mouse clicks and graphic interfaces:
       Since version 1.1.0 some commands can be started from a graphic front end.

        Pat.py: Offers some of the tools with a graphic interface.

       Note: Not all commands and not all options are provided by this interface.
             I hope the frontend can be handled intuitive and it is self-explaning.

2. Examples:

   Calc.py -f c2=c2*5.2 mymeas.dat
   Multiply the second column of mymeas.dat with 5.2 and send the result to stdout.

   Deriv.py -n 5 result.dat > deriv_result.dat
   Calculate the derivative dy/dx (y: column 2 x: column 1) by using 5 neighbour points
   and write the result to the file deriv_result.dat. Column 2 of deriv_result.dat contains
   the derivation.

   Exchg.py -c 1,5 data1.prn | Integ.py > integ_data1.prn
   Swap column 1 and 5 of data1.prn, build the integral y.dx (x: column1, y: column 2)
   and write the result to integ_data1.prn. Column 2 of integ_data1.prn contains
   the integral.

   Fileop.y -f - -x 2,2 -y 3,4 signal.dat zero.dat > result.dat
   Calculate y(x) = y3(x2) of signal.dat minus y4(x3) of signal.dat and save the result
   in result.dat. The x values are column 2 of signal.dat and column 2 of zero.dat.
   The y values are column 3 of signal.dat and column 4 of zero.dat. the x-values of the
   two files need not to be exactlxy the same values, linear interpolation is used
   to get the value  y4(x2) from y4(x3).

   echo "270.0" | Intpol -c calib_table.dat
   Takes the  x-value 270.0  (from stdin).
   Prints x and the interpolated y value for x to stdout.
   Column 1 (x) and column 2 (y) of calib_table.dat are used as interpolation table    
    
3. Special Addons:

   a. Thermal Expansion 
     For my thermal expansion experiment some special functions have been
     programmed, but these function require special formatted data files,
     which have additional information included in the head lines.
   
      CGap.py: Calculate the gap of a thermal expansion measurement (simple)
       Gap.py: Calculate the gap of a thermal expansion measurement (advanced)
               Needs a special configuration file
       Dll.py: Calculate Delta l/l of a thermal expansion measurement
      Zero.py: Shift the zero point of a thermal expansion measurement

   b. Soft X-Ray spectroscopy 
     For my soft xray experiment a special functions have been
     programmed, but this function requires a special formatted data file.

     Addspec.py: Add all spectra in a SXS-data file
  
  This add ons are not included in the standard version

4. Installation:

   Follow the instructions in the file INSTALL.

   The command line tools are adapted to work under Windows (TM) too. 

   The graphic frontend Pat.py is only roughly tested to work under Linux and X.
   It is not adapted to work under Windows (TM), but may be this will follow.
